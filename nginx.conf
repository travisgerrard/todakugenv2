server {
    listen 80;
    server_name todakureader.com www.todakureader.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name todakureader.com www.todakureader.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/todakureader.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/todakureader.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (uncomment if you're sure)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Root directory and index files
    root /var/www/todakureader.com;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Serve site.webmanifest directly
    location = /site.webmanifest {
        add_header Content-Type application/manifest+json;
        add_header Access-Control-Allow-Origin *;
    }

    # Directly serve static assets from filesystem
    location ^~ /_next/static/ {
        alias /var/www/todakureader.com/_next/static/;
        access_log off;
        expires 365d;
        
        # JS files with proper MIME type
        location ~ \.js$ {
            add_header Content-Type application/javascript;
            try_files $uri =404;
        }
        
        # CSS files with proper MIME type
        location ~ \.css$ {
            add_header Content-Type text/css;
            try_files $uri =404;
        }
    }

    # Serve image files directly
    location ~* \.(ico|png|jpg|jpeg|gif|svg)$ {
        access_log off;
        expires 30d;
        try_files $uri @proxy;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    # Main proxy configuration for non-static content
    location / {
        try_files $uri @proxy;
    }

    # Proxy to Next.js application
    location @proxy {
        proxy_pass http://127.0.0.1:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
} 